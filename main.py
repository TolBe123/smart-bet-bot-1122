import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from telegram.error import Conflict
import matplotlib.pyplot as plt
import io
import datetime

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# ======== –ö–æ–º–∞–Ω–¥—ã ========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(
        [["üí∞ –ë–∞–Ω–∫", "üìä –ì—Ä–∞—Ñ–∏–∫"], ["üìå –°—Ç–∞–≤–∫–∏", "‚úÖ –°–¥–µ–ª–∞–Ω–æ"], ["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]],
        resize_keyboard=True
    )
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=keyboard)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/start ‚Äî –∑–∞–ø—É—Å–∫\n/recommendations ‚Äî —Å—Ç–∞–≤–∫–∏\n/bank ‚Äî –±–∞–Ω–∫\n/graph ‚Äî –≥—Ä–∞—Ñ–∏–∫\n/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/placed ‚Äî —Å–¥–µ–ª–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏")

async def recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç value-—Å—Ç–∞–≤–æ–∫. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ò–ò-–∞–Ω–∞–ª–∏–∑.")

async def bank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ–∫—É—â–∏–π –±–∞–Ω–∫: 1000‚ÇΩ")

async def graph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dates = [datetime.date.today() - datetime.timedelta(days=i) for i in range(5)][::-1]
    values = [1000, 1020, 980, 1050, 1100]

    plt.figure()
    plt.plot(dates, values, marker='o')
    plt.title("–ë–∞–ª–∞–Ω—Å")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("‚ÇΩ")
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    await update.message.reply_photo(photo=buf)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏—Ç: +100‚ÇΩ\n–°–¥–µ–ª–∞–Ω–æ —Å—Ç–∞–≤–æ–∫: 5\nWinrate: 60%")

async def placed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–¥–µ–ª–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:\n1. 15.06 ‚Äì –ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –ê ‚Äì 2.1 (‚úÖ)\n2. 16.06 ‚Äì –¢–ë(2.5) ‚Äì 1.9 (‚ùå)")

# ======== –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ ========

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("recommendations", recommendations))
    app.add_handler(CommandHandler("bank", bank))
    app.add_handler(CommandHandler("graph", graph))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("placed", placed))

    async def handle_buttons(update, context):
        text = update.message.text.strip()
        if text == "üí∞ –ë–∞–Ω–∫":
            await bank(update, context)
        elif text == "üìä –ì—Ä–∞—Ñ–∏–∫":
            await graph(update, context)
        elif text == "üìå –°—Ç–∞–≤–∫–∏":
            await recommendations(update, context)
        elif text == "‚úÖ –°–¥–µ–ª–∞–Ω–æ":
            await placed(update, context)
        elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await stats(update, context)

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))

    try:
        app.run_polling()
    except Conflict:
        logging.warning("‚ö†Ô∏è Bot is already running in another process.")
    except Exception as e:
        logging.error(f"Unexpected error: {e}")

if __name__ == "__main__":
    main()
