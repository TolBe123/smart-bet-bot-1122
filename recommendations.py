import os
import requests
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

API_KEY = os.getenv("API_FOOTBALL_KEY")

async def recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    headers = {
        "x-apisports-key": API_KEY
    }

    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    today = datetime.today().strftime('%Y-%m-%d')
    fixtures_url = f"https://v3.football.api-sports.io/fixtures?date={today}"

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
        resp = requests.get(fixtures_url, headers=headers)
        resp.raise_for_status()
        data = resp.json().get("response", [])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–∫–æ–ª—å–∫–æ –º–∞—Ç—á–µ–π –ø—Ä–∏—à–ª–æ
        await update.message.reply_text(f"üìÖ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(data)}")

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if not data:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
            return

        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 –º–∞—Ç—á–µ–π
        messages = []
        for game in data[:5]:
            league = game["league"]["name"]
            home = game["teams"]["home"]["name"]
            away = game["teams"]["away"]["name"]
            status = game["fixture"]["status"]["short"]

            messages.append(f"üèÜ {league}: {home} vs {away} ({status})")

        await update.message.reply_text("\n".join(messages))

    except Exception as e:
        import traceback
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞:")
        await update.message.reply_text(traceback.format_exc())
