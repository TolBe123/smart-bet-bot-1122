import os
import requests
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

API_KEY = os.getenv("API_FOOTBALL_KEY")

async def recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    headers = {
        "x-apisports-key": API_KEY
    }

    today = datetime.today().strftime('%Y-%m-%d')
    url = f"https://v3.football.api-sports.io/fixtures?date={today}&timezone=Europe/Moscow"

    try:
        response = requests.get(url, headers=headers)
        data = response.json().get("response", [])

        await update.message.reply_text(f"üìÖ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(data)}")

        if not data:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
            return

        # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 3 –º–∞—Ç—á–∞ (–∫–∞–∫ —Ç–µ—Å—Ç)
        for match in data[:3]:
            league = match["league"]["name"]
            home = match["teams"]["home"]["name"]
            away = match["teams"]["away"]["name"]
            time = match["fixture"]["date"][11:16]

            await update.message.reply_text(
                f"üèÜ {league}\n"
                f"‚öΩ {home} vs {away}\n"
                f"üïí –í—Ä–µ–º—è: {time} (–ø–æ –ú–°–ö)"
            )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
